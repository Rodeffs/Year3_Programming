### ЛЕКЦИЯ 1

# Для работы с файлами по дефолту используется модуль os:
import os


# В более новых версиях Python используется pathlib (он быстрее и предпочтительнее):
import pathlib


# Гораздо чаще используется на практике from, чтобы не таскать с собой всю библиотеку:
from pathlib import Path


# Чтобы использовать символ \ для указания пути к файлу на винде, а не как команду, перед строкой нужно поставить символ r:
example1 = r"C:\Users\Admin"


# В Linux (кстати, лучшая ОС на свете) очевидно используется обычный / для пути:
example2 = "/home/Admin/"


# Для получения списка файлов из текущей директории используется glob:
from glob import glob


# Примеры использования:

files1 = list(glob('h*'))  # здесь h* это шаблон, вернёт все файлы, начинающиеся на букву h

files2 = list(Path('.').glob("*.txt"))  # вернёт все текстовые файлы в нынешней директории


# В питоне (как я уже знал) НЕ ИСПОЛЬЗОВАТЬ методы read() и close() ПРОСТО ТАК


# Аналог try и catch в Питоне это try и finally (для обработки ошибок):

"""
try:
    код, который может вывести ошибку

except Exception:
    обработка ошибки

finally:
    код, который выполниться в любой случае
"""


# Пример открытия файла таким образом:

"""
f = open()

try:
    f.read()

except Exception:
    print("s")

finally:
    f.close()
"""


# Также используется with:
## with open("file") as file


# Для обработки параметров в командной строке используется библиотека sys:
from sys import argv

# argv - это список аргументов, которые переданы через командную строку, аналог C


# Для получения первого аргумента, нужно обратиться ко второму элементу массива, т.к. первый это всегда имя файла или команды:
first_argument = argv[1]


# Можно почитать документацию об всех этих библиотеках отдельно


# ИСПОЛЬЗОВАТЬ Jupiter ДЛЯ РАБОТЫ С ФАЙЛАМИ .ipnb КОТОРЫЕ БУДЕТ СКИДЫВАТЬ ПРЕПОД

